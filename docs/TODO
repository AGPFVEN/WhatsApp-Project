Annotations:
    - Static has all the css and js files

To do:
    Registration:
        CURRENTLY: save user session (in local browser session data)
            Algorithm:
                1. (done) User gets a qr code
                2. (done) User sends qr code to server (in order to get response with encrypted response)
                    - (done) Then phone number is sent to user in order to save it in localstorage
                3. Encryption module
                    -(currently) Use own encryption module to encrypt user info
                4. Hash phone number
                5. Send everything to Azure
                6. Load Home
            Considerations:
                - Use hash to encrypt phone number and upload it to azure
                - Use symmetric encryption to encrypt user session in cloud (AES256)
                    - AES256 is secure even for quantum computing (For a not short period of time, assuming no groundbreaking discoveries)
                - Encrypt web storage in the cloud
                    the most secure approach would be to encrypt in the user side (but it would make the user experience worse, as to make the outmost secure aproximation I would need to rely on the user sending data periodically)
            Packages:
                - https://pkg.go.dev/crypto
                - https://pkg.go.dev/github.com/fernet/fernet-go
            
To do (later):
    - Disable headless option
    - Where to store AES256 key? 

    Create frontend:
        -Design page
        -Loading page initial page
            https://www.pinayu.com/blog/como-insertar-un-cargador-en-tu-web#resp1
        -Pop-ups así: https://www.edureka.co/blog/understanding-structures-and-padding-in-c/
        -Registration page

        -Métodos de pago:
            -ApplePay
            -Tarjeta Bancaria

        -Solution: Async Web Request Flow
            -Tools:
                - javascript -> XMLHttpRequest
                - golang     -> POST?

                - js send    -> http.FileServe
                - js minimize-> Build tool (WebPack or Rollup)


Solved:
    Registration:
        Qr extraction
        Show qr to user
        Session management (get browser session from user)
        Autoregister (get browser data and phone number)
        Compress files
        Upload wss files (done):
            Azure:
                Resources:
                    https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-go?tabs=roles-azure-portal
                    https://www.youtube.com/watch?v=Vs3wyFk9upo
                    https://www.youtube.com/watch?v=bX-SSTCe2CY
                    https://learn.microsoft.com/en-us/azure/storage/blobs/authorize-data-operations-portal
                    Use python example applied to go project. Spent 5+ hours following useless tutorials
                Progress:
                    Quickstart microsoft app done (permisions and local implementations successfully done)

To run:
    go build
    ./WhatsApp_project