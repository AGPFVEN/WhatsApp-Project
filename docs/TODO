Currently:
    2. Load Home:
        2.1 Design user experience idea
            
To do (later):
    - Disable headless option
    - Change log_in.html line 17 'http://localhost:3000/home' to whatever I want
    - Where to store AES256 key? 

    Create frontend:
        -Design page
        -Loading page initial page
            https://www.pinayu.com/blog/como-insertar-un-cargador-en-tu-web#resp1
        -Pop-ups así: https://www.edureka.co/blog/understanding-structures-and-padding-in-c/
        -Registration page

        -Métodos de pago:
            -ApplePay
            -Tarjeta Bancaria

        -Solution: Async Web Request Flow
            -Tools:
                - javascript -> XMLHttpRequest
                - golang     -> POST?

                - js send    -> http.FileServe
                - js minimize-> Build tool (WebPack or Rollup)


Solved:
    1. Registration:
        (done) 1.1 Qr extraction
        (done) 1.2 Show qr to user
        (done) 1.3 Session management (get browser session from user)
        (done) 1.4 Autoregister (get browser data and phone number)
        (done) 1.5 Compress files
            - Considerations
                - Own Encryption module to zip and unzip files (successfully)
        (done) 1.6 Encrypt user data and phone number 
            - Considerations:
                - Use hash to encrypt phone number and upload it to azure
                - Use symmetric encryption to encrypt user session in cloud (AES256)
                    - AES256 is secure even for quantum computing (For a not short period of time, assuming no groundbreaking discoveries)
                - Encrypt web storage in the cloud
                    - The most secure approach would be to encrypt in the user side (but it would make the user experience worse, as to make the outmost secure aproximation I would need to rely on the user sending data periodically)
        (done) Upload wss files (done):
            Azure:
                Resources:
                    https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-go?tabs=roles-azure-portal
                    https://www.youtube.com/watch?v=Vs3wyFk9upo
                    https://www.youtube.com/watch?v=bX-SSTCe2CY
                    https://learn.microsoft.com/en-us/azure/storage/blobs/authorize-data-operations-portal
                    Use python example applied to go project. Spent 5+ hours following useless tutorials
        (done) Save user session (in local browser session data)
To run:
    go build
    ./WhatsApp_project